[
  {
    "questionNo": "01",
    "question": "How does react work under the hood?",
    "answer": "React is a JavaScript library (not a framework) that creates user interfaces (UIs) in a predictable and efficient way using declarative code. You can use it to help build single-page applications and mobile apps. React works in declarative code which describes what we want instead of saying how to do it, as you would with imperative code. We use declarative code to create components, which is how we display information. Essentially, components are reusable UIs which allow you to split the app into separate blocks that act independently of each other. In a declarative UI, developers aren’t in charge of changing the UI when something happens. They don’t have to worry about hiding or showing divs, as you would with a code-heavy imperative UI. We only have to worry about receiving a specific app ‘state’ — or, a specific screen displaying detailed information at any time — and rendering it in the UI.",
    "open": "false"
  },
  {
    "questionNo": "02",
    "question": "What is The Difference Between State and Props in React?",
    "answer": "React.js is one of the most widely used JavaScript libraries that every front-end developer should know. Understanding what props and state are and the differences between them is a big step towards learning React. * Props is short for properties and they are used to pass data between React components. React’s data flow between components is uni-directional (from parent to child only). *React has another special built-in object called state, which allows components to create and manage their own data. So unlike props, components cannot pass data with state, but they can create and manage it internally. * State should not be modified directly, but it can be modified with a special method called setState( ). * Components receive data from outside with props, whereas they can create and manage their own data with state Props are used to pass data, whereas state is for managing data.  * Data from props is read-only, and cannot be modified by a component that is receiving it from outside. * State data can be modified by its own component, but is private (cannot be accessed from outside). * Props can only be passed from parent component to child (unidirectional flow). * Modifying state should happen with the setState ( ) method.",
    "open": "false"
  },
  {
    "questionNo": "03",
    "question": "What kinds of work useEffect do without data loading?",
    "answer": "According to the official documentation, effects run after every completed render, but you can choose to fire them only when certain values have changed. This hook uses an array of 'dependencies': variables or states that useEffect listen to for changes. * Validating an input while it's receiving characters is another great application for useEffect. Whilst the input is being stored in a state using useState, the validation takes place every time the input changes, giving immediate feedback to the user. * We can use useEffect to filter an array 'on the fly' by typing letters into an input element. To do so, we will need to use a state to save the input, and a filter implementation inside the useEffect that will be triggered when the input changes, thanks to useEffect dependencies.  * We can use the useEffect hook to trigger an animation on a shopping cart as a side effect of adding a new product to it. In this case, we'll need a state to handle the cart items, and another state to handle the animation trigger. * In this use case, we want to trigger a state update due to an updated fetch() call. We are sending the fetched data to a child component, and whenever that data is changed, the child component re-process it.",
    "open": "false"
  }
]
